{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\namki\\\\Desktop\\\\react_tailing\\\\ReactStudy\\\\4week\\\\youflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\namki\\\\Desktop\\\\react_tailing\\\\ReactStudy\\\\4week\\\\youflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\namki\\\\Desktop\\\\react_tailing\\\\ReactStudy\\\\4week\\\\youflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\namki\\\\Desktop\\\\react_tailing\\\\ReactStudy\\\\4week\\\\youflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\namki\\\\Desktop\\\\react_tailing\\\\ReactStudy\\\\4week\\\\youflix\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\namki\\\\Desktop\\\\react_tailing\\\\ReactStudy\\\\4week\\\\youflix\\\\src\\\\component\\\\contentList\\\\ContentList.js\";\nimport React, { Component } from 'react';\nimport './ContentList.css';\nimport Content from \"../content/Content.js\";\nimport PropTypes from \"prop-types\"; //콘텐츠의 리스트를 보여주는 컴포넌트\n\nvar ContentList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContentList, _Component);\n\n  function ContentList() {\n    _classCallCheck(this, ContentList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ContentList).apply(this, arguments));\n  }\n\n  _createClass(ContentList, [{\n    key: \"listRender\",\n    //한줄에 4개의 콘텐츠를 출력 하기 위해서 컴포넌트를 구성해주는 함수\n    value: function listRender() {\n      var _this = this;\n\n      console.log(this.props.contents);\n      var count = Math.ceil(this.props.contents.length / 4); //현재 콘텐츠를 한줄에 4개씩 보여주면 몇줄이 나오는지를 구함\n\n      var component = []; //컴포넌트를 담을 배열 선언\n\n      for (var i = 0; i < count; i++) {\n        //반복문을 이용해서 한줄씩 컴포넌트를 만들어줌\n        var dataPerRow = this.props.contents.slice(i * 4, i * 4 + 4); //slice를 이용해서 그 줄에 들어가야 하는 데이터를 반환받음\n        //현재줄*4번째 부터 현재줄*4+4 하면 0번째 줄일때는 0부터 3까지\n        //1번째 줄일때는 4부터 7까지의 데이터를 불러온다.\n        //위에서 선언한 배열에 한줄을 구성하는 컴포넌트를 push한다.\n        //push는 배열의 맨뒤에 데이터를 넣을때 사용 하는 함수이다.\n        //이런 식으로 컴포넌트를 추가 가능한 이유는 첫번째 시간에 말했던것 처럼 jsx는 결국 js를 좀더 편리하게 보여주는 역할일뿐\n        //결국 jsx가 읽혀질때는 xml형태의 js로 변환되기 때문이다.\n\n        component.push( // row는 부트스트랩에서 한줄을 의미 하는 class이다.\n        React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, //위에서 4개의 데이터를 뽑아서 저장해 가지고 있던 배열을 map을 이용해서 4개의 콘텐츠를 그려준다.\n        dataPerRow.map(function (item, index) {\n          return (// 반복문 안에서 jsx를 사용할때는 반드시 key를 써줘야 한다.\n            // col-md-3은 한 줄을 12등분 했을때 3칸만큼을 차지 하겠다는 의미이다.\n            React.createElement(\"div\", {\n              className: \"col-md-3\",\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32\n              },\n              __self: this\n            }, React.createElement(Content, {\n              content: item,\n              onClick: _this.props.onClick,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 37\n              },\n              __self: this\n            }))\n          );\n        })));\n      }\n\n      return component;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"contentList align-items-center justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, this.listRender());\n    }\n  }]);\n\n  return ContentList;\n}(Component);\n\nContentList.propTypes = {\n  contents: PropTypes.array,\n  onClick: PropTypes.func\n};\nexport default ContentList;","map":{"version":3,"sources":["C:\\Users\\namki\\Desktop\\react_tailing\\ReactStudy\\4week\\youflix\\src\\component\\contentList\\ContentList.js"],"names":["React","Component","Content","PropTypes","ContentList","console","log","props","contents","count","Math","ceil","length","component","i","dataPerRow","slice","push","map","item","index","onClick","listRender","propTypes","array","func"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,mBAAP;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;IACMC,W;;;;;;;;;;;;;AAEJ;iCACa;AAAA;;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,QAAvB;AACD,UAAIC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAU,KAAKJ,KAAL,CAAWC,QAAX,CAAoBI,MAApB,GAA2B,CAArC,CAAZ,CAFY,CAEuC;;AACnD,UAAIC,SAAS,GAAG,EAAhB,CAHY,CAGO;;AACnB,WAAI,IAAIC,CAAC,GAAE,CAAX,EAAaA,CAAC,GAACL,KAAf,EAAqBK,CAAC,EAAtB,EAA0B;AAAC;AAC1B,YAAIC,UAAU,GAAG,KAAKR,KAAL,CAAWC,QAAX,CAAoBQ,KAApB,CAA0BF,CAAC,GAAC,CAA5B,EAA8BA,CAAC,GAAC,CAAF,GAAI,CAAlC,CAAjB,CADyB,CAC4B;AACL;AACA;AAE9C;AACA;AACA;AACA;;AACFD,QAAAA,SAAS,CAACI,IAAV,EACI;AACH;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEO;AACLF,QAAAA,UAAU,CAACG,GAAX,CAAe,UAACC,IAAD,EAAMC,KAAN,EAAgB;AAC3B,iBACO;AACA;AACL;AAAK,cAAA,SAAS,EAAC,UAAf;AAA0B,cAAA,GAAG,EAAEA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAKO,oBAAC,OAAD;AAAS,cAAA,OAAO,EAAED,IAAlB;AAAwB,cAAA,OAAO,EAAE,KAAI,CAACZ,KAAL,CAAWc,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALP;AAHF;AAWA,SAZJ,CAHF,CAFD;AAqBA;;AAED,aAAOR,SAAP;AACA;;;6BACQ;AAGP,aACE;AAAK,QAAA,SAAS,EAAC,uDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,KAAKS,UAAL,EAJH,CADF;AAQD;;;;EApDuBrB,S;;AAuD1BG,WAAW,CAACmB,SAAZ,GAAwB;AACtBf,EAAAA,QAAQ,EAAEL,SAAS,CAACqB,KADE;AAEtBH,EAAAA,OAAO,EAAElB,SAAS,CAACsB;AAFG,CAAxB;AAKA,eAAerB,WAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './ContentList.css';\r\nimport Content from \"../content/Content.js\"\r\nimport PropTypes from \"prop-types\";\r\n\r\n//콘텐츠의 리스트를 보여주는 컴포넌트\r\nclass ContentList extends Component {\r\n\r\n  //한줄에 4개의 콘텐츠를 출력 하기 위해서 컴포넌트를 구성해주는 함수\r\n  listRender() {\r\n    console.log(this.props.contents)\r\n  \tvar count = Math.ceil(this.props.contents.length/4)//현재 콘텐츠를 한줄에 4개씩 보여주면 몇줄이 나오는지를 구함\r\n  \tlet component = [] //컴포넌트를 담을 배열 선언\r\n  \tfor(let i =0;i<count;i++) {//반복문을 이용해서 한줄씩 컴포넌트를 만들어줌\r\n  \t\tlet dataPerRow = this.props.contents.slice(i*4,i*4+4)//slice를 이용해서 그 줄에 들어가야 하는 데이터를 반환받음\r\n                                                    //현재줄*4번째 부터 현재줄*4+4 하면 0번째 줄일때는 0부터 3까지\r\n                                                    //1번째 줄일때는 4부터 7까지의 데이터를 불러온다.\r\n\r\n      //위에서 선언한 배열에 한줄을 구성하는 컴포넌트를 push한다.\r\n      //push는 배열의 맨뒤에 데이터를 넣을때 사용 하는 함수이다.\r\n      //이런 식으로 컴포넌트를 추가 가능한 이유는 첫번째 시간에 말했던것 처럼 jsx는 결국 js를 좀더 편리하게 보여주는 역할일뿐\r\n      //결국 jsx가 읽혀질때는 xml형태의 js로 변환되기 때문이다.\r\n  \t\tcomponent.push(\r\n        // row는 부트스트랩에서 한줄을 의미 하는 class이다.\r\n  \t\t\t<div className=\"row\">\r\n  \t\t\t\t{\r\n            //위에서 4개의 데이터를 뽑아서 저장해 가지고 있던 배열을 map을 이용해서 4개의 콘텐츠를 그려준다.\r\n  \t\t\t\t\tdataPerRow.map((item,index) => {\r\n\t\t\t      \t\treturn (\r\n                  // 반복문 안에서 jsx를 사용할때는 반드시 key를 써줘야 한다.\r\n                  // col-md-3은 한 줄을 12등분 했을때 3칸만큼을 차지 하겠다는 의미이다.\r\n\t\t\t      \t\t  <div className=\"col-md-3\" key={index}>\r\n\t\t\t\t\t      \t  {/* \r\n                      콘텐츠를 표현해주는 content component를 선언하는데 이때 onClick이벤트를 props로 넘겨준다.\r\n                      이 이벤트는 콘텐츠를 눌렀을때 상단의 실행되는 플레이어를 변경하는 이벤트 이다.\r\n                    */}\r\n                    <Content content={item} onClick={this.props.onClick}/>\r\n\t\t\t\t\t        </div>\r\n\t\t\t      \t\t)\r\n\t\t\t      \t})\r\n  \t\t\t\t}\r\n  \t\t\t</div>\r\n  \t\t)\r\n  \t}\r\n\r\n  \treturn component\r\n  }\t\r\n  render() {\r\n  \t\r\n\r\n    return (\r\n      <div className=\"contentList align-items-center justify-content-center\">\r\n\t      {/*\r\n          리스트를 렌더링해주는 함수를 실행 시킨다.\r\n        */}\r\n        {this.listRender()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nContentList.propTypes = {\r\n  contents: PropTypes.array,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default ContentList;\r\n"]},"metadata":{},"sourceType":"module"}