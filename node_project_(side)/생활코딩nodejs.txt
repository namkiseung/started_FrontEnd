○ nodejs 개요
○ 모듈설치
express
○ 모듈실행
node
nodemon
○ 소스코드
http, express모듈 선언
app객체 만듬
rep인자의 end함수를 호출해야 클라이언트가 응답을 받는다.
end로 브라우저에 전송
****실습
서버 계속 키는 방법 nodemon
##################################################
js로 어떻게 서버측에서 사용할 수 있나?
JS언어는 1990년 팀버너스리에 의해 Web탄생
1994에 netscape탄생(대중적 웹 브라우저인 넷스케이프)->이를 통해 web이 설장
1995에 자바스크립트 등장
자바스크립트 등장하면서 웹이 동적인 요소를 갖게됨.(html위에서)->사용자와 상호작용가능
근데 웹에서만 사용가능.
지금은 자바스크립트가 성장함.
2004년에 JS에 사건이 발생. 구글지메일은 자바스크립트로 이루어진 웹어플리케이션이다. 그리고 구글맵 이런것들은 웹 기술을 이용한 자바스크립트로 개발됨.
그러면서 한 번 개발하면 어디서든 작동하고, 웹 브라우저가지고만 개발이 가능하다라는 특징이 생김.
2008년에 크롬웹브라우저 나오면서 V8이라는 엔진이 나옴.(자바스크립트로 코딩이 가능해지는데 큰 변화생김)탈웹화
09년에 node.js환경이 생김. 얘는 구글이만든 V8엔진을 js엔진으로 생기고, event-driven이라는js개발 방식과 입출력을 처리하는 non-blocking-IO 를 사용한다. -> 웹브라우저뿐아니라 서버에서도 js가 동작하게됨.

JS기술은 언어적 측면과 RunTime측면을 가지고있다.

V8이라는 구글의 엔진으로 node가 빠르다
####################간단한 웹애플리케이션
nodejs.org접속해서 다운로드!
그리고
node.js공식문서 코드 복붙해서 웹서버 프로그램을 만들고 실행!!!설명
"요청이 들어오길 기다리는상태보여주자"

인터넷동작방법(서버, 클라이언트, IP, 포트)
->"이걸배우면 덜 혼란스럽고, 외우는ㄱ ㅔ확 줄어든다"
1960년에 인터넷이 등장, 컴퓨터 등장이후 가장 큰사건
인터넷과 관련된 개념은 클라이언트와 서버
클라이언트는 '갑'이자 고객
서버는 제공하는것이며 '을'
요청과 응답(제공)관계 즉, 갑을 관계
이건 절대적이 아닌 상대적관계

컴퓨터는 근데 직접 어떤 서버에 접근이 안된다. (전화번호부에 번호를저장해둔다.)
인터넷도 주소가 있다.
a.com에는 어떤 서버애플리케이션을 연결해서 응답해줄까?(많은 서버가있음)
이 많은 서버를 구별하는것이 포트.
노트js의초점 : 서버측에있으면서 빠르게 서버에 오는 요청을 처리하는것

###################모듈과 npm
모듈은 부품이다.(패키지는 조금 더 큰개념(독립애플리케이션))

require는 '요구,필수'라는 뜻인데, nodejs에서제공하는 http모듈(부품)요구한다라는 뜻.
http부품을 load해서사용하는 뜻.
리턴은 변수에 담음.

NPM(node package manager)
HTTP, OS는 nodejs가 제공하는 모듈임. 그 외에도 Date, String, Array, Math등
위는 JS가 제공하는 모듈이다.

목표 타인의 모듈을 사용해보자. npm
node세계에 앱스토어라고 할 수도 있겠다.(어떤 s/w설치할때 다운,압축 등 서비스 해줌)
->nodejs에서 만들어지긴 했지만, 이 외에 다른 개발할때도 사용
npm설치는 www.npmjs.com에서 가능.


#####################Express도입
http객체를 require해서 
http.createServer({function}).listen({port, hostname, function()})
인데, 할일(구현할 기능)은 많고, 짧은 소스코드로 구현하기 쉽게 하기 위해
웹 프레임워크를 사용하자. 바로 Express

Express설치
expressjs.com/ko/starter/installing.html문서 참고해서 하자
처음엔 작업디렉터리에 가서 npm init으로 작업디렉터리라고 지정하고
 npm install --save express

[app.js]  //메인파일, 메인어플리케이션, 메인스레드
const http = require('http') //모듈불러와서 담아둔다.(리턴값이 객체)
const app = express() //express함수를 통해 웹어플리케이션 객체를 만듬.
app.listen(3000, function() {console.log('G');}); //3000번 port를 리슨한다. 리슨 성공하면 callback함수실행

app.get('/', function(req, res){   //사용자가 웹서버에 접근하는 방식선언 req는 요청객체, res는 응답에 대한객체
   res.send(); 
})

개념 : 사용자, 라우터, 컨트롤러
웹어플리케이션에서 할 것들 (JS, NPM, Router)

정적파일제공
app.use(express.static('public'));  //정적인 파일은 여기서 public그럼 public디렉터리에 있는 파일
만일 웹페이지에 이미지 넣고싶다.

app.get('/route', function(req, res){
res.send('hello, <img src="route.png">'); //이미지 리소스는 위의 public폴더에 있음.
})

js api인 date사용할 수도 있다.
var time = Date();
${time}

우리는 이로써 동적인페이지를 라우팅(사칙계산,시간 등)하고, 혹은 정적인 html을 라우팅하는데, 이를 조금더 효율적으로 하기 위해
템플린 엔진(Jade)을 사용한다.
npm install jade --save

app.set('view engine', 'jade'); //app에게 템플릿엔진을 쓴다고 말하는데, 종류는 jade라는것/
app.set('views', './views'); //템플릿엔진(views) 모듈 위치

app.get('/template', function(req, res){ //템플릿경로타고 온사용자에게 함수를 실행할건데, temp페이지를 렌더링해서 전송해줌
 res.render('temp'); //렌더링한다(소스코드 페이지를)
});
그럼 우리는 ./views디렉터리에 temp.jade라는 파일이 있어야함.

jade express code pretty를 구글에 검색 "어떻게 코드(렌더링 jade파일)를 이쁘게하냐"
그러면 app.locals.pretty = true;라고 전역(app.js)에 선언.
이제 app.js에서 객체를 렌더링하는 jade파일에 보내자
res.render('temp', {time:'hello'}); // temp안에 time변수를 사용가능하게 된다.
더 많은 기능은
jade-lang.com에서 확인하자(그래머들)


URL을 이용한 정보의 전달
query string이란것은 http://a.com/topic?id=3에서 변수 부분을 말함.
그러면 query string을 이용해 Express의 query객체를 사용해보자.
요청 URL : localhost:3000/?name=egoing
app.get('/', function(req, res){
  res.send(req.query.name);
})
문서를 보자 expressjs.com/en/4x/api.html#req 여러 명령어는 api이기 때문에 명령어사전이라고 할 수 있다.
컨트롤러에 req, res이렇게 인자가 2개있는데, 

즉, query string은 어떤 애플리케이션에게 정보를 전달할 때 사용하는 URL의 약속된 표준

Form은 URL을 생성해주는 프로그램이라고 해도 좋다.
app.js에서 받을때
GET : req.query.id;
POST :  req.body.id;
근데, post는 undefind되있음 ㅋㅋreq에 객체로 그래서
문서찾아보니 미들웨어같은 body-parser 확장기능 모듈이나 multer를 사용하라고 한다.
npm install body-parser하고 require('body-parser')해서 사용하면됨.
그리고 app.use(bodyParser.urlencoded({ extended: false}))
바디파서가 대기하다가 사용자의 요청시 form의 post온 요청을 처리하는데 도와준다.































